{"version":3,"sources":["Context/StateContext.jsx","Components/CardImages.jsx","Components/Jumbotron.jsx","GameBase.jsx","App.js","index.js"],"names":["StateContext","createContext","StateContextProvider","state","images","dogImages","catImages","birdImages","displayedImages","count","clicked","shuffleCards","i","length","j","Math","floor","random","setState","shuffleImages","num","this","Provider","value","props","children","Component","CardImages","useContext","Fragment","className","map","image","src","alt","letter","onClick","handleClick","id","Jumbotron","handleTitle","score","highScore","progressMessage","GameBase","useState","setClicked","setScore","setHighScore","setProgressMessage","toggleModel","setToggleModel","yourScore","setYourScore","win","setWin","transform","transition","inlinestyle","setInlinestyle","includes","handleReset","handleModel","params","setTimeout","style","indexOf","newScore","handleIncrement","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.115d1897.chunk.js","sourcesContent":["import React, { createContext, Component } from 'react';\r\nimport dogImages from '../dogImages.json';\r\nimport catImages from '../catImages.json';\r\nimport birdImages from '../birdImages.json';\r\n\r\nexport const StateContext = createContext();\r\n\r\nclass StateContextProvider extends Component {\r\n\tstate = {\r\n\t\timages: [ dogImages, catImages, birdImages ],\r\n\t\tdisplayedImages: dogImages,\r\n\t\tcount: 0,\r\n\t\tclicked: null\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.shuffleImages();\r\n\t}\r\n\r\n\tshuffleCards = () => {\r\n\t\tlet images = this.state.displayedImages;\r\n\t\tfor (let i = images.length - 1; i > 0; i--) {\r\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t[ images[i], images[j] ] = [ images[j], images[i] ];\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tdogImages: images\r\n\t\t});\r\n\t};\r\n\r\n\tshuffleImages = () => {\r\n\t\tlet num = Math.floor(Math.random() * this.state.images.length);\r\n\t\tthis.setState({\r\n\t\t\tdisplayedImages: this.state.images[num]\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<StateContext.Provider\r\n\t\t\t\tvalue={{ ...this.state, shuffleCards: this.shuffleCards, shuffleImages: this.shuffleImages }}\r\n\t\t\t>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t</StateContext.Provider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default StateContextProvider;\r\n","import React, { useContext } from 'react';\r\nimport { StateContext } from '../Context/StateContext';\r\n\r\nfunction CardImages(props) {\r\n\tconst { displayedImages } = useContext(StateContext);\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"images\">\r\n\t\t\t\t{displayedImages.map((image) => (\r\n\t\t\t\t\t<div key={image.id}>\r\n\t\t\t\t\t\t<img src={image.image} alt={image.letter} onClick={() => props.handleClick(image.id)} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nexport default CardImages;\r\n","import React from 'react';\nfunction Jumbotron(props) {\n\treturn (\n\t\t<div className=\"Jumbotron\">\n\t\t\t<h1>Memory Game!</h1>\n\t\t\t<p className=\"jumboHeading\">\n\t\t\t\tTo get started, click on any {props.handleTitle()} picture. Don't click the same {props.handleTitle()}{' '}\n\t\t\t\ttwice or it's game over!\n\t\t\t</p>\n\t\t\t<nav className=\"container-fluid progressBar\">\n\t\t\t\t<h3>Score: {props.score}</h3>\n\t\t\t\t<h3>High Score: {props.highScore}</h3>\n\t\t\t\t<br />\n\t\t\t\t<p>{props.progressMessage}</p>\n\t\t\t</nav>\n\t\t</div>\n\t);\n}\nexport default Jumbotron;\n","import React, { useContext, useState } from 'react';\r\nimport CardImages from './Components/CardImages';\r\nimport { StateContext } from './Context/StateContext';\r\nimport Jumbotron from './Components/Jumbotron';\r\n\r\nfunction GameBase() {\r\n\tconst { displayedImages, shuffleCards, shuffleImages } = useContext(StateContext);\r\n\tconst [ clicked, setClicked ] = useState([]);\r\n\tconst [ score, setScore ] = useState(0);\r\n\tconst [ highScore, setHighScore ] = useState(0);\r\n\tconst [ progressMessage, setProgressMessage ] = useState([]);\r\n\tconst [ toggleModel, setToggleModel ] = useState(false);\r\n\tconst [ yourScore, setYourScore ] = useState(0);\r\n\tconst [ win, setWin ] = useState(true);\r\n\tconst [ inlinestyle, setInlinestyle ] = useState({ transform: 'scale(0,0)', transition: '0.5s' });\r\n\r\n\tfunction handleIncrement() {\r\n\t\tconst newScore = score + 1;\r\n\r\n\t\tif (score >= highScore) {\r\n\t\t\tsetScore(newScore);\r\n\t\t\tsetYourScore(newScore);\r\n\t\t\treturn setHighScore(newScore);\r\n\t\t}\r\n\t\tsetYourScore(newScore);\r\n\t\tsetScore(newScore);\r\n\t\tsetProgressMessage('Great job! Keep going!');\r\n\t\tshuffleCards();\r\n\t}\r\n\r\n\tfunction handleTitle() {\r\n\t\tif (displayedImages[0].letter.includes('Bird') ) {\r\n\t\t\treturn 'Bird';\r\n\t\t} else if (displayedImages[0].letter.includes('Dog')) {\r\n\t\t\treturn 'Dog';\r\n\t\t}\r\n\r\n\t\treturn 'Cat';\r\n\t}\r\n\r\n\tfunction handleReset() {\r\n\t\tsetScore(0);\r\n\t\tsetClicked([]);\r\n\t\tsetProgressMessage('');\r\n\t}\r\n\r\n\tfunction handleModel(params) {\r\n\t\tswitch (params) {\r\n\t\t\tcase 'toggleModel':\r\n\t\t\t\tsetToggleModel(true);\r\n\t\t\t\tsetInlinestyle({\r\n\t\t\t\t\ttransition: '0.5s',\r\n\t\t\t\t\ttransform: 'scale(1,1)'\r\n\t\t\t\t});\r\n\t\t\t\tsetWin(true);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'startGame':\r\n\t\t\t\tsetWin(true);\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tsetToggleModel(false);\r\n\t\t\t\t}, 250);\r\n\t\t\t\tshuffleCards();\r\n\t\t\t\tshuffleImages();\r\n\t\t\t\tsetInlinestyle({\r\n\t\t\t\t\ttransition: '0.5s',\r\n\t\t\t\t\ttransform: 'scale(0,0)'\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'you win!':\r\n\t\t\t\tsetToggleModel(true);\r\n\t\t\t\tsetWin(false);\r\n\t\t\t\tsetInlinestyle({\r\n\t\t\t\t\ttransition: '0.5s',\r\n\t\t\t\t\ttransform: 'scale(1,1)'\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleClick(id) {\r\n\t\tif (clicked.indexOf(id) === -1) {\r\n\t\t\tsetClicked([ ...clicked, id ]);\r\n\t\t\tshuffleCards();\r\n\t\t\thandleIncrement();\r\n\t\t} else if (highScore === 10) {\r\n\t\t\thandleModel('you win!');\r\n\t\t\thandleReset();\r\n\t\t} else {\r\n\t\t\thandleModel('toggleModel');\r\n\t\t\thandleReset();\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<Jumbotron\r\n\t\t\t\tscore={score}\r\n\t\t\t\thighScore={highScore}\r\n\t\t\t\tprogressMessage={progressMessage}\r\n\t\t\t\thandleTitle={handleTitle}\r\n\t\t\t/>\r\n\t\t\t{toggleModel && (\r\n\t\t\t\t<div className=\"model-backdrop\">\r\n\t\t\t\t\t<div className=\"model\" style={inlinestyle}>\r\n\t\t\t\t\t\t{win && (\r\n\t\t\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t\t\tOh No!,You Clicked that {handleTitle()} 'Before.<br />\r\n\t\t\t\t\t\t\t\tGame Over\r\n\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{!win && <h3 className=\"youwin\">You Won </h3>}\r\n\t\t\t\t\t\t<h3>Your score:{yourScore}</h3>\r\n\t\t\t\t\t\t<h3>High score:{highScore}</h3>\r\n\t\t\t\t\t\t<button className=\"btn btn-success\" onClick={() => handleModel('startGame')}>\r\n\t\t\t\t\t\t\tPlay Again\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\r\n\t\t\t<CardImages handleClick={handleClick} />\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nexport default GameBase;\r\n","import React, { Component } from 'react';\nimport StateContextProvider from './Context/StateContext';\nimport GameBase from './GameBase';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<StateContextProvider>\n\t\t\t\t\t<GameBase />\n\t\t\t\t</StateContextProvider>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nReactDOM.render(\n    <App />,\ndocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}